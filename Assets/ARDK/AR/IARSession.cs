// Copyright 2021 Niantic, Inc. All Rights Reserved.

using System;

using Niantic.ARDK.AR.Anchors;
using Niantic.ARDK.AR.ARSessionEventArgs;
using Niantic.ARDK.AR.Awareness;
using Niantic.ARDK.AR.Camera;
using Niantic.ARDK.AR.Configuration;
using Niantic.ARDK.AR.Awareness.Depth;
using Niantic.ARDK.AR.Frame;
using Niantic.ARDK.AR.Mesh;
using Niantic.ARDK.AR.SLAM;
using Niantic.ARDK.Extensions.Meshing;
using Niantic.ARDK.LocationService;
using Niantic.ARDK.Utilities;

using UnityEngine;
using UnityEngine.Rendering;

namespace Niantic.ARDK.AR
{
  /// Values for AR Session running state
  public enum ARSessionState
  {
    None = 0,
    Running,
    Paused,
    Failed
  }

  /// Main object for managing AR experiences.
  /// @note
  ///   In order to release underlying native resources quickly, it is important to call Dispose
  ///   when you're done with an IARSession instance rather than leaving it for the garbage
  ///   collector.
  public interface IARSession:
    IDisposable
  {
    /// The runtime environment this ARSession is compatible with.
    RuntimeEnvironment RuntimeEnvironment { get; }

    /// Object that defines what tracking, mapping, and depth processing behaviours are enabled
    /// in the session.
    IARConfiguration Configuration { get; }

    /// AR interpretation of the world most recently surfaced by the session.
    /// @note May be null.
    IARFrame CurrentFrame { get; }

    /// Gets or sets the "Disposal Policy" of the frames. By default, all frames are fully disposed
    /// after a new frame is available. This can be changed to just release the image and textures
    /// (so other traits like Anchors can still be accessed) or to be completely keep them in
    /// memory.
    /// Assuming you change this value, you should also correctly dispose of the frames on your own
    /// after you finish reusing them.
    ARFrameDisposalPolicy DefaultFrameDisposalPolicy { get; set; }

    /// World scale applied to all transforms.
    /// @note This factor scales what we internally represent as a meter. Set to `2` means that
    /// for every meter the device moves in the real world, the virtual camera will move 2
    /// meters -- effectively scaling "down" the virtual world.
    float WorldScale { get; set; }

    /// An identifier used internally to relate different systems. This is the identifier for
    /// the AR system.
    Guid StageIdentifier { get; }

    /// Current state of the session
    ARSessionState State { get; }

    /// The mesh generated by the currently running session.
    /// @note Will never be null, but will only contain data when meshing is enabled.
    IARMesh Mesh { get; }

    /// Starts AR processing with the specified configuration and options.
    /// @param configuration
    ///   Object that defines what tracking, mapping, and depth processing behaviours are enabled
    ///   in the session.
    /// @param options
    ///   Options defining how to transition the session if you are changing its configuration.
    ///   This parameter has no effect if running the session for the first time.
    /// @note
    ///   Run can safely be called at any point during the application's run cycle, but if it
    ///   has been called before, passing in a configuration of a different type than the
    ///   current configuration may result in tracking being reset.
    void Run
    (
      IARConfiguration configuration,
      ARSessionRunOptions options = ARSessionRunOptions.None
    );

    /// Pauses processing in the session.
    /// @note
    ///   If the device moves while the session is paused and then the session restarts running,
    ///   world tracking will be incorrect until the session is able to re-localize.
    void Pause();

    /// Creates and adds an anchor to be tracked by the session.
    /// @param transform
    ///   Position, rotation and scale of the anchor in the coordinate space of the AR session
    ///   it will be tracked in.
    /// @returns The created anchor.
    IARAnchor AddAnchor(Matrix4x4 transform);

    /// Removes the specified anchor from being tracked by the session.
    /// @param anchor The anchor to remove.
    void RemoveAnchor(IARAnchor anchor);

    /// Set up this session to listen to updates from the provided location service.
    /// @param locationService The location service to listen to updates from.
    void SetupLocationService(ILocationService locationService);

    /// Check the status of the initialization process required to run ContextAwareness features.
    /// @param error
    ///   When this method returns, contains an enum value describing the error status of
    ///   initialization.
    /// @param errorMessage
    ///   When this method returns, contains an error message if an error occured.
    ///   Otherwise, an empty string.
    /// @returns
    ///   Enum value describing where in the ContextAwareness initialization process the
    ///   session is currently at.
    /// @note
    ///   On devices where LiDAR is available, the Awareness algorithm will not be automatically
    ///   initialized when meshing is enabled.
    AwarenessInitializationStatus GetAwarenessInitializationStatus
    (
      out AwarenessInitializationError error,
      out string errorMessage
    );

    /// Called when the session is deinitialized.
    event ArdkEventHandler<ARSessionDeinitializedArgs> Deinitialized;

    /// Called when the session has just been run
    event ArdkEventHandler<ARSessionRanArgs> Ran;

    /// Called when the session has just been paused
    event ArdkEventHandler<ARSessionPausedArgs> Paused;

    /// Called when the session receives an updated ARFrame.
    event ArdkEventHandler<FrameUpdatedArgs> FrameUpdated;

    /// Alerts subscribers that anchors have been merged and the duplicates have been removed.
    event ArdkEventHandler<AnchorsMergedArgs> AnchorsMerged;

    /// Alerts subscribers when one or more anchors have been added to the session.
    event ArdkEventHandler<AnchorsArgs> AnchorsAdded;

    /// Alerts subscribers when one or more anchors have been updated.
    event ArdkEventHandler<AnchorsArgs> AnchorsUpdated;

    /// Alerts subscribers when one or more anchors have been removed from the session.
    /// After an Anchor is removed from the session, it is disposed of and can't be used anymore.
    event ArdkEventHandler<AnchorsArgs> AnchorsRemoved;

    /// Alerts subscribers when one or more maps have been added to the session.
    event ArdkEventHandler<MapsArgs> MapsAdded;

    /// Alerts subscribers when one or more maps have been updated.
    event ArdkEventHandler<MapsArgs> MapsUpdated;

    /// Informs subscribers to changes in the quality of the position tracking.
    event ArdkEventHandler<CameraTrackingStateChangedArgs> CameraTrackingStateChanged;

    /// Informs subscribers when the session has temporarily stopped processing frames
    /// and tracking position.
    /// @note This event will only fire on iOS.
    event ArdkEventHandler<ARSessionInterruptedArgs> SessionInterrupted;

    /// Informs subscribers when the session has resumed processing from an interrupted peerState.
    /// @note This event will only fire on iOS.
    event ArdkEventHandler<ARSessionInterruptionEndedArgs> SessionInterruptionEnded;

    /// Asks the event subscribers whether to attempt recovery of world-tracking peerState after an
    /// interruption. Defaults to return false.
    /// To tell that a recovery attempt should be made, set the
    /// args.ShouldSessionAttemptRelocalization to true.
    /// @remark In the event of multiple subscribers, values are aggregated via OR.
    /// @note This event will only fire on iOS.
    /// @note Not supported in Remote Debugging.
    event ArdkEventHandler<QueryingShouldSessionAttemptRelocalizationArgs>
      QueryingShouldSessionAttemptRelocalization;

    /// Informs subscribers when the session has stopped running due to an error.
    event ArdkEventHandler<ARSessionFailedArgs> SessionFailed;
  }
}
