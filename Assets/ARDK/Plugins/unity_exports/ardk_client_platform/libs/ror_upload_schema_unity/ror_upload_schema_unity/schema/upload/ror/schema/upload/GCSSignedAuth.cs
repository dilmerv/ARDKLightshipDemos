// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GCSSignedAuth : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GCSSignedAuth GetRootAsGCSSignedAuth(ByteBuffer _bb) { return GetRootAsGCSSignedAuth(_bb, new GCSSignedAuth()); }
  public static GCSSignedAuth GetRootAsGCSSignedAuth(ByteBuffer _bb, GCSSignedAuth obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GCSSignedAuth __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Authorization { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAuthorizationBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAuthorizationBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAuthorizationArray() { return __p.__vector_as_array<byte>(4); }
  public string Date { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDateBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDateBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDateArray() { return __p.__vector_as_array<byte>(6); }
  public string SignedPayload { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignedPayloadBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSignedPayloadBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSignedPayloadArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<ror.schema.upload.GCSSignedAuth> CreateGCSSignedAuth(FlatBufferBuilder builder,
      StringOffset authorizationOffset = default(StringOffset),
      StringOffset dateOffset = default(StringOffset),
      StringOffset signed_payloadOffset = default(StringOffset)) {
    builder.StartTable(3);
    GCSSignedAuth.AddSignedPayload(builder, signed_payloadOffset);
    GCSSignedAuth.AddDate(builder, dateOffset);
    GCSSignedAuth.AddAuthorization(builder, authorizationOffset);
    return GCSSignedAuth.EndGCSSignedAuth(builder);
  }

  public static void StartGCSSignedAuth(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddAuthorization(FlatBufferBuilder builder, StringOffset authorizationOffset) { builder.AddOffset(0, authorizationOffset.Value, 0); }
  public static void AddDate(FlatBufferBuilder builder, StringOffset dateOffset) { builder.AddOffset(1, dateOffset.Value, 0); }
  public static void AddSignedPayload(FlatBufferBuilder builder, StringOffset signedPayloadOffset) { builder.AddOffset(2, signedPayloadOffset.Value, 0); }
  public static Offset<ror.schema.upload.GCSSignedAuth> EndGCSSignedAuth(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.GCSSignedAuth>(o);
  }
  public GCSSignedAuthT UnPack() {
    var _o = new GCSSignedAuthT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GCSSignedAuthT _o) {
    _o.Authorization = this.Authorization;
    _o.Date = this.Date;
    _o.SignedPayload = this.SignedPayload;
  }
  public static Offset<ror.schema.upload.GCSSignedAuth> Pack(FlatBufferBuilder builder, GCSSignedAuthT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.GCSSignedAuth>);
    var _authorization = _o.Authorization == null ? default(StringOffset) : builder.CreateString(_o.Authorization);
    var _date = _o.Date == null ? default(StringOffset) : builder.CreateString(_o.Date);
    var _signed_payload = _o.SignedPayload == null ? default(StringOffset) : builder.CreateString(_o.SignedPayload);
    return CreateGCSSignedAuth(
      builder,
      _authorization,
      _date,
      _signed_payload);
  }
};

public class GCSSignedAuthT
{
  public string Authorization { get; set; }
  public string Date { get; set; }
  public string SignedPayload { get; set; }

  public GCSSignedAuthT() {
    this.Authorization = null;
    this.Date = null;
    this.SignedPayload = null;
  }
}


}
