// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UploadServiceInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UploadServiceInfo GetRootAsUploadServiceInfo(ByteBuffer _bb) { return GetRootAsUploadServiceInfo(_bb, new UploadServiceInfo()); }
  public static UploadServiceInfo GetRootAsUploadServiceInfo(ByteBuffer _bb, UploadServiceInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UploadServiceInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ror.schema.upload.ServiceInfos ServiceInfoType { get { int o = __p.__offset(4); return o != 0 ? (ror.schema.upload.ServiceInfos)__p.bb.Get(o + __p.bb_pos) : ror.schema.upload.ServiceInfos.NONE; } }
  public TTable? ServiceInfo<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<ror.schema.upload.UploadServiceInfo> CreateUploadServiceInfo(FlatBufferBuilder builder,
      ror.schema.upload.ServiceInfos serviceInfo_type = ror.schema.upload.ServiceInfos.NONE,
      int serviceInfoOffset = 0) {
    builder.StartTable(2);
    UploadServiceInfo.AddServiceInfo(builder, serviceInfoOffset);
    UploadServiceInfo.AddServiceInfoType(builder, serviceInfo_type);
    return UploadServiceInfo.EndUploadServiceInfo(builder);
  }

  public static void StartUploadServiceInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddServiceInfoType(FlatBufferBuilder builder, ror.schema.upload.ServiceInfos serviceInfoType) { builder.AddByte(0, (byte)serviceInfoType, 0); }
  public static void AddServiceInfo(FlatBufferBuilder builder, int serviceInfoOffset) { builder.AddOffset(1, serviceInfoOffset, 0); }
  public static Offset<ror.schema.upload.UploadServiceInfo> EndUploadServiceInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.UploadServiceInfo>(o);
  }
  public UploadServiceInfoT UnPack() {
    var _o = new UploadServiceInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UploadServiceInfoT _o) {
    _o.ServiceInfo = new ror.schema.upload.ServiceInfosUnion();
    _o.ServiceInfo.Type = this.ServiceInfoType;
    switch (this.ServiceInfoType) {
      default: break;
      case ror.schema.upload.ServiceInfos.GCSServiceInfo:
        _o.ServiceInfo.Value = this.ServiceInfo<ror.schema.upload.GCSServiceInfo>().HasValue ? this.ServiceInfo<ror.schema.upload.GCSServiceInfo>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<ror.schema.upload.UploadServiceInfo> Pack(FlatBufferBuilder builder, UploadServiceInfoT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.UploadServiceInfo>);
    var _serviceInfo_type = _o.ServiceInfo == null ? ror.schema.upload.ServiceInfos.NONE : _o.ServiceInfo.Type;
    var _serviceInfo = _o.ServiceInfo == null ? 0 : ror.schema.upload.ServiceInfosUnion.Pack(builder, _o.ServiceInfo);
    return CreateUploadServiceInfo(
      builder,
      _serviceInfo_type,
      _serviceInfo);
  }
};

public class UploadServiceInfoT
{
  public ror.schema.upload.ServiceInfosUnion ServiceInfo { get; set; }

  public UploadServiceInfoT() {
    this.ServiceInfo = null;
  }
}


}
