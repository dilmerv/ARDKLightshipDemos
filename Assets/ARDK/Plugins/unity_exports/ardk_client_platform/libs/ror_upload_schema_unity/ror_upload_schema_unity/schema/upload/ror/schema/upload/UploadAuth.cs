// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UploadAuth : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UploadAuth GetRootAsUploadAuth(ByteBuffer _bb) { return GetRootAsUploadAuth(_bb, new UploadAuth()); }
  public static UploadAuth GetRootAsUploadAuth(ByteBuffer _bb, UploadAuth obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UploadAuth __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ror.schema.upload.ServiceAuths ServiceAuthType { get { int o = __p.__offset(4); return o != 0 ? (ror.schema.upload.ServiceAuths)__p.bb.Get(o + __p.bb_pos) : ror.schema.upload.ServiceAuths.NONE; } }
  public TTable? ServiceAuth<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<ror.schema.upload.UploadAuth> CreateUploadAuth(FlatBufferBuilder builder,
      ror.schema.upload.ServiceAuths serviceAuth_type = ror.schema.upload.ServiceAuths.NONE,
      int serviceAuthOffset = 0) {
    builder.StartTable(2);
    UploadAuth.AddServiceAuth(builder, serviceAuthOffset);
    UploadAuth.AddServiceAuthType(builder, serviceAuth_type);
    return UploadAuth.EndUploadAuth(builder);
  }

  public static void StartUploadAuth(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddServiceAuthType(FlatBufferBuilder builder, ror.schema.upload.ServiceAuths serviceAuthType) { builder.AddByte(0, (byte)serviceAuthType, 0); }
  public static void AddServiceAuth(FlatBufferBuilder builder, int serviceAuthOffset) { builder.AddOffset(1, serviceAuthOffset, 0); }
  public static Offset<ror.schema.upload.UploadAuth> EndUploadAuth(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.UploadAuth>(o);
  }
  public UploadAuthT UnPack() {
    var _o = new UploadAuthT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UploadAuthT _o) {
    _o.ServiceAuth = new ror.schema.upload.ServiceAuthsUnion();
    _o.ServiceAuth.Type = this.ServiceAuthType;
    switch (this.ServiceAuthType) {
      default: break;
      case ror.schema.upload.ServiceAuths.Anonymous:
        _o.ServiceAuth.Value = this.ServiceAuth<ror.schema.upload.Anonymous>().HasValue ? this.ServiceAuth<ror.schema.upload.Anonymous>().Value.UnPack() : null;
        break;
      case ror.schema.upload.ServiceAuths.GCSServiceAccount:
        _o.ServiceAuth.Value = this.ServiceAuth<ror.schema.upload.GCSServiceAccount>().HasValue ? this.ServiceAuth<ror.schema.upload.GCSServiceAccount>().Value.UnPack() : null;
        break;
      case ror.schema.upload.ServiceAuths.GCSSignedWriteURL:
        _o.ServiceAuth.Value = this.ServiceAuth<ror.schema.upload.GCSSignedWriteURL>().HasValue ? this.ServiceAuth<ror.schema.upload.GCSSignedWriteURL>().Value.UnPack() : null;
        break;
      case ror.schema.upload.ServiceAuths.GCSSignedComposeURL:
        _o.ServiceAuth.Value = this.ServiceAuth<ror.schema.upload.GCSSignedComposeURL>().HasValue ? this.ServiceAuth<ror.schema.upload.GCSSignedComposeURL>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<ror.schema.upload.UploadAuth> Pack(FlatBufferBuilder builder, UploadAuthT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.UploadAuth>);
    var _serviceAuth_type = _o.ServiceAuth == null ? ror.schema.upload.ServiceAuths.NONE : _o.ServiceAuth.Type;
    var _serviceAuth = _o.ServiceAuth == null ? 0 : ror.schema.upload.ServiceAuthsUnion.Pack(builder, _o.ServiceAuth);
    return CreateUploadAuth(
      builder,
      _serviceAuth_type,
      _serviceAuth);
  }
};

public class UploadAuthT
{
  public ror.schema.upload.ServiceAuthsUnion ServiceAuth { get; set; }

  public UploadAuthT() {
    this.ServiceAuth = null;
  }
}


}
