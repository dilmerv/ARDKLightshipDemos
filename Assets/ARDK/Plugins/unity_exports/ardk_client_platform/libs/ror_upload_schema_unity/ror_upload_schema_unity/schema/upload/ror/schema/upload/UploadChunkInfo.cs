// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UploadChunkInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UploadChunkInfo GetRootAsUploadChunkInfo(ByteBuffer _bb) { return GetRootAsUploadChunkInfo(_bb, new UploadChunkInfo()); }
  public static UploadChunkInfo GetRootAsUploadChunkInfo(ByteBuffer _bb, UploadChunkInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UploadChunkInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ChunkIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateChunkIndex(ulong chunkIndex) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, chunkIndex); return true; } else { return false; } }
  public ror.schema.upload.UploadServiceInfo? ServiceInfo { get { int o = __p.__offset(6); return o != 0 ? (ror.schema.upload.UploadServiceInfo?)(new ror.schema.upload.UploadServiceInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ror.schema.upload.UploadAuth? Auth { get { int o = __p.__offset(8); return o != 0 ? (ror.schema.upload.UploadAuth?)(new ror.schema.upload.UploadAuth()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ror.schema.upload.UploadChunkInfo> CreateUploadChunkInfo(FlatBufferBuilder builder,
      ulong chunkIndex = 0,
      Offset<ror.schema.upload.UploadServiceInfo> serviceInfoOffset = default(Offset<ror.schema.upload.UploadServiceInfo>),
      Offset<ror.schema.upload.UploadAuth> authOffset = default(Offset<ror.schema.upload.UploadAuth>)) {
    builder.StartTable(3);
    UploadChunkInfo.AddChunkIndex(builder, chunkIndex);
    UploadChunkInfo.AddAuth(builder, authOffset);
    UploadChunkInfo.AddServiceInfo(builder, serviceInfoOffset);
    return UploadChunkInfo.EndUploadChunkInfo(builder);
  }

  public static void StartUploadChunkInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddChunkIndex(FlatBufferBuilder builder, ulong chunkIndex) { builder.AddUlong(0, chunkIndex, 0); }
  public static void AddServiceInfo(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadServiceInfo> serviceInfoOffset) { builder.AddOffset(1, serviceInfoOffset.Value, 0); }
  public static void AddAuth(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadAuth> authOffset) { builder.AddOffset(2, authOffset.Value, 0); }
  public static Offset<ror.schema.upload.UploadChunkInfo> EndUploadChunkInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.UploadChunkInfo>(o);
  }
  public UploadChunkInfoT UnPack() {
    var _o = new UploadChunkInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UploadChunkInfoT _o) {
    _o.ChunkIndex = this.ChunkIndex;
    _o.ServiceInfo = this.ServiceInfo.HasValue ? this.ServiceInfo.Value.UnPack() : null;
    _o.Auth = this.Auth.HasValue ? this.Auth.Value.UnPack() : null;
  }
  public static Offset<ror.schema.upload.UploadChunkInfo> Pack(FlatBufferBuilder builder, UploadChunkInfoT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.UploadChunkInfo>);
    var _serviceInfo = _o.ServiceInfo == null ? default(Offset<ror.schema.upload.UploadServiceInfo>) : ror.schema.upload.UploadServiceInfo.Pack(builder, _o.ServiceInfo);
    var _auth = _o.Auth == null ? default(Offset<ror.schema.upload.UploadAuth>) : ror.schema.upload.UploadAuth.Pack(builder, _o.Auth);
    return CreateUploadChunkInfo(
      builder,
      _o.ChunkIndex,
      _serviceInfo,
      _auth);
  }
};

public class UploadChunkInfoT
{
  public ulong ChunkIndex { get; set; }
  public ror.schema.upload.UploadServiceInfoT ServiceInfo { get; set; }
  public ror.schema.upload.UploadAuthT Auth { get; set; }

  public UploadChunkInfoT() {
    this.ChunkIndex = 0;
    this.ServiceInfo = null;
    this.Auth = null;
  }
}


}
