// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Anonymous : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Anonymous GetRootAsAnonymous(ByteBuffer _bb) { return GetRootAsAnonymous(_bb, new Anonymous()); }
  public static Anonymous GetRootAsAnonymous(ByteBuffer _bb, Anonymous obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Anonymous __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAnonymous(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<ror.schema.upload.Anonymous> EndAnonymous(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.Anonymous>(o);
  }
  public AnonymousT UnPack() {
    var _o = new AnonymousT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnonymousT _o) {
  }
  public static Offset<ror.schema.upload.Anonymous> Pack(FlatBufferBuilder builder, AnonymousT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.Anonymous>);
    StartAnonymous(builder);
    return EndAnonymous(builder);
  }
};

public class AnonymousT
{

  public AnonymousT() {
  }
}


}
