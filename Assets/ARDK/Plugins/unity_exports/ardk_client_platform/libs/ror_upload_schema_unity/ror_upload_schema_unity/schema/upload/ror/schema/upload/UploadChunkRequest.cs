// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UploadChunkRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UploadChunkRequest GetRootAsUploadChunkRequest(ByteBuffer _bb) { return GetRootAsUploadChunkRequest(_bb, new UploadChunkRequest()); }
  public static UploadChunkRequest GetRootAsUploadChunkRequest(ByteBuffer _bb, UploadChunkRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UploadChunkRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ror.schema.upload.UploadSessionInfo? SessionInfo { get { int o = __p.__offset(4); return o != 0 ? (ror.schema.upload.UploadSessionInfo?)(new ror.schema.upload.UploadSessionInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ror.schema.upload.UploadChunkInfo? ChunkInfo { get { int o = __p.__offset(6); return o != 0 ? (ror.schema.upload.UploadChunkInfo?)(new ror.schema.upload.UploadChunkInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ror.schema.upload.UploadAuth? Auth { get { int o = __p.__offset(8); return o != 0 ? (ror.schema.upload.UploadAuth?)(new ror.schema.upload.UploadAuth()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ror.schema.upload.UploadChunkBody? Body { get { int o = __p.__offset(10); return o != 0 ? (ror.schema.upload.UploadChunkBody?)(new ror.schema.upload.UploadChunkBody()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ror.schema.upload.UploadChunkRequest> CreateUploadChunkRequest(FlatBufferBuilder builder,
      Offset<ror.schema.upload.UploadSessionInfo> sessionInfoOffset = default(Offset<ror.schema.upload.UploadSessionInfo>),
      Offset<ror.schema.upload.UploadChunkInfo> chunkInfoOffset = default(Offset<ror.schema.upload.UploadChunkInfo>),
      Offset<ror.schema.upload.UploadAuth> authOffset = default(Offset<ror.schema.upload.UploadAuth>),
      Offset<ror.schema.upload.UploadChunkBody> bodyOffset = default(Offset<ror.schema.upload.UploadChunkBody>)) {
    builder.StartTable(4);
    UploadChunkRequest.AddBody(builder, bodyOffset);
    UploadChunkRequest.AddAuth(builder, authOffset);
    UploadChunkRequest.AddChunkInfo(builder, chunkInfoOffset);
    UploadChunkRequest.AddSessionInfo(builder, sessionInfoOffset);
    return UploadChunkRequest.EndUploadChunkRequest(builder);
  }

  public static void StartUploadChunkRequest(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSessionInfo(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadSessionInfo> sessionInfoOffset) { builder.AddOffset(0, sessionInfoOffset.Value, 0); }
  public static void AddChunkInfo(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadChunkInfo> chunkInfoOffset) { builder.AddOffset(1, chunkInfoOffset.Value, 0); }
  public static void AddAuth(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadAuth> authOffset) { builder.AddOffset(2, authOffset.Value, 0); }
  public static void AddBody(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadChunkBody> bodyOffset) { builder.AddOffset(3, bodyOffset.Value, 0); }
  public static Offset<ror.schema.upload.UploadChunkRequest> EndUploadChunkRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.UploadChunkRequest>(o);
  }
  public static void FinishUploadChunkRequestBuffer(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadChunkRequest> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUploadChunkRequestBuffer(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadChunkRequest> offset) { builder.FinishSizePrefixed(offset.Value); }
  public UploadChunkRequestT UnPack() {
    var _o = new UploadChunkRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UploadChunkRequestT _o) {
    _o.SessionInfo = this.SessionInfo.HasValue ? this.SessionInfo.Value.UnPack() : null;
    _o.ChunkInfo = this.ChunkInfo.HasValue ? this.ChunkInfo.Value.UnPack() : null;
    _o.Auth = this.Auth.HasValue ? this.Auth.Value.UnPack() : null;
    _o.Body = this.Body.HasValue ? this.Body.Value.UnPack() : null;
  }
  public static Offset<ror.schema.upload.UploadChunkRequest> Pack(FlatBufferBuilder builder, UploadChunkRequestT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.UploadChunkRequest>);
    var _sessionInfo = _o.SessionInfo == null ? default(Offset<ror.schema.upload.UploadSessionInfo>) : ror.schema.upload.UploadSessionInfo.Pack(builder, _o.SessionInfo);
    var _chunkInfo = _o.ChunkInfo == null ? default(Offset<ror.schema.upload.UploadChunkInfo>) : ror.schema.upload.UploadChunkInfo.Pack(builder, _o.ChunkInfo);
    var _auth = _o.Auth == null ? default(Offset<ror.schema.upload.UploadAuth>) : ror.schema.upload.UploadAuth.Pack(builder, _o.Auth);
    var _body = _o.Body == null ? default(Offset<ror.schema.upload.UploadChunkBody>) : ror.schema.upload.UploadChunkBody.Pack(builder, _o.Body);
    return CreateUploadChunkRequest(
      builder,
      _sessionInfo,
      _chunkInfo,
      _auth,
      _body);
  }
};

public class UploadChunkRequestT
{
  public ror.schema.upload.UploadSessionInfoT SessionInfo { get; set; }
  public ror.schema.upload.UploadChunkInfoT ChunkInfo { get; set; }
  public ror.schema.upload.UploadAuthT Auth { get; set; }
  public ror.schema.upload.UploadChunkBodyT Body { get; set; }

  public UploadChunkRequestT() {
    this.SessionInfo = null;
    this.ChunkInfo = null;
    this.Auth = null;
    this.Body = null;
  }
  public static UploadChunkRequestT DeserializeFromBinary(byte[] fbBuffer) {
    return UploadChunkRequest.GetRootAsUploadChunkRequest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    fbb.Finish(UploadChunkRequest.Pack(fbb, this).Value);
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
