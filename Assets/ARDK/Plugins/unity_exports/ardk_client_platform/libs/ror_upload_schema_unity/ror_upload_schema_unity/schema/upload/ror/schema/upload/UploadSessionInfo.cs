// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ror.schema.upload
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UploadSessionInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UploadSessionInfo GetRootAsUploadSessionInfo(ByteBuffer _bb) { return GetRootAsUploadSessionInfo(_bb, new UploadSessionInfo()); }
  public static UploadSessionInfo GetRootAsUploadSessionInfo(ByteBuffer _bb, UploadSessionInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UploadSessionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ror.schema.UUID? Session { get { int o = __p.__offset(4); return o != 0 ? (ror.schema.UUID?)(new ror.schema.UUID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public ulong OutOf { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateOutOf(ulong outOf) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, outOf); return true; } else { return false; } }
  public ror.schema.upload.ServiceInfos ServiceInfoType { get { int o = __p.__offset(8); return o != 0 ? (ror.schema.upload.ServiceInfos)__p.bb.Get(o + __p.bb_pos) : ror.schema.upload.ServiceInfos.NONE; } }
  public TTable? ServiceInfo<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public ror.schema.upload.UploadAuth? SessionAuth { get { int o = __p.__offset(12); return o != 0 ? (ror.schema.upload.UploadAuth?)(new ror.schema.upload.UploadAuth()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartUploadSessionInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSession(FlatBufferBuilder builder, Offset<ror.schema.UUID> sessionOffset) { builder.AddStruct(0, sessionOffset.Value, 0); }
  public static void AddOutOf(FlatBufferBuilder builder, ulong outOf) { builder.AddUlong(1, outOf, 0); }
  public static void AddServiceInfoType(FlatBufferBuilder builder, ror.schema.upload.ServiceInfos serviceInfoType) { builder.AddByte(2, (byte)serviceInfoType, 0); }
  public static void AddServiceInfo(FlatBufferBuilder builder, int serviceInfoOffset) { builder.AddOffset(3, serviceInfoOffset, 0); }
  public static void AddSessionAuth(FlatBufferBuilder builder, Offset<ror.schema.upload.UploadAuth> sessionAuthOffset) { builder.AddOffset(4, sessionAuthOffset.Value, 0); }
  public static Offset<ror.schema.upload.UploadSessionInfo> EndUploadSessionInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ror.schema.upload.UploadSessionInfo>(o);
  }
  public UploadSessionInfoT UnPack() {
    var _o = new UploadSessionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UploadSessionInfoT _o) {
    _o.Session = this.Session.HasValue ? this.Session.Value.UnPack() : null;
    _o.OutOf = this.OutOf;
    _o.ServiceInfo = new ror.schema.upload.ServiceInfosUnion();
    _o.ServiceInfo.Type = this.ServiceInfoType;
    switch (this.ServiceInfoType) {
      default: break;
      case ror.schema.upload.ServiceInfos.GCSServiceInfo:
        _o.ServiceInfo.Value = this.ServiceInfo<ror.schema.upload.GCSServiceInfo>().HasValue ? this.ServiceInfo<ror.schema.upload.GCSServiceInfo>().Value.UnPack() : null;
        break;
    }
    _o.SessionAuth = this.SessionAuth.HasValue ? this.SessionAuth.Value.UnPack() : null;
  }
  public static Offset<ror.schema.upload.UploadSessionInfo> Pack(FlatBufferBuilder builder, UploadSessionInfoT _o) {
    if (_o == null) return default(Offset<ror.schema.upload.UploadSessionInfo>);
    var _serviceInfo_type = _o.ServiceInfo == null ? ror.schema.upload.ServiceInfos.NONE : _o.ServiceInfo.Type;
    var _serviceInfo = _o.ServiceInfo == null ? 0 : ror.schema.upload.ServiceInfosUnion.Pack(builder, _o.ServiceInfo);
    var _sessionAuth = _o.SessionAuth == null ? default(Offset<ror.schema.upload.UploadAuth>) : ror.schema.upload.UploadAuth.Pack(builder, _o.SessionAuth);
    StartUploadSessionInfo(builder);
    AddSession(builder, ror.schema.UUID.Pack(builder, _o.Session));
    AddOutOf(builder, _o.OutOf);
    AddServiceInfoType(builder, _serviceInfo_type);
    AddServiceInfo(builder, _serviceInfo);
    AddSessionAuth(builder, _sessionAuth);
    return EndUploadSessionInfo(builder);
  }
};

public class UploadSessionInfoT
{
  public ror.schema.UUIDT Session { get; set; }
  public ulong OutOf { get; set; }
  public ror.schema.upload.ServiceInfosUnion ServiceInfo { get; set; }
  public ror.schema.upload.UploadAuthT SessionAuth { get; set; }

  public UploadSessionInfoT() {
    this.Session = new ror.schema.UUIDT();
    this.OutOf = 0;
    this.ServiceInfo = null;
    this.SessionAuth = null;
  }
}


}
