//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Grapeshot {

public class Rate : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Rate(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Rate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Rate() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          GrapeshotRatePINVOKE.delete_Rate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void process() {
    GrapeshotRatePINVOKE.Rate_process(swigCPtr);
    if (GrapeshotRatePINVOKE.SWIGPendingException.Pending) throw GrapeshotRatePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual RateTicket claimTicket(ror.schema.upload.UploadChunkRequest chunkRequest) {
var chunkRequest_table = FlatBuffers.TableUtils.GetTable(chunkRequest);var chunkRequest_length = chunkRequest_table.bb.Length;var chunkRequest_pos = chunkRequest_table.bb_pos;var chunkRequest_seg = chunkRequest_table.bb.ToArraySegment(chunkRequest_pos, chunkRequest_length - chunkRequest_pos);var chunkRequest_managed_array = chunkRequest_seg.Array;var chunkRequest_managed_handle = System.Runtime.InteropServices.GCHandle.Alloc(chunkRequest_managed_array, System.Runtime.InteropServices.GCHandleType.Pinned);var chunkRequest_buffer_ptr = chunkRequest_managed_handle.AddrOfPinnedObject();System.IntPtr chunkRequest_fb_ptr;unsafe {    var chunkRequest_buffer_unsafe_ptr = (byte*) chunkRequest_buffer_ptr.ToPointer();    chunkRequest_fb_ptr = (System.IntPtr) (chunkRequest_buffer_unsafe_ptr + chunkRequest_pos);}var chunkRequest_intermediate = new FBIntermediateBuffer();chunkRequest_intermediate.ptr = chunkRequest_fb_ptr;
    try {
      global::System.IntPtr cPtr = GrapeshotRatePINVOKE.Rate_claimTicket(swigCPtr, chunkRequest_intermediate);
      RateTicket ret = (cPtr == global::System.IntPtr.Zero) ? null : new RateTicket(cPtr, true);
      if (GrapeshotRatePINVOKE.SWIGPendingException.Pending) throw GrapeshotRatePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } finally {
chunkRequest_managed_handle.Free();
    }
  }

  public virtual RateTicket tryClaimTicket(ror.schema.upload.UploadChunkRequest chunkRequest) {
var chunkRequest_table = FlatBuffers.TableUtils.GetTable(chunkRequest);var chunkRequest_length = chunkRequest_table.bb.Length;var chunkRequest_pos = chunkRequest_table.bb_pos;var chunkRequest_seg = chunkRequest_table.bb.ToArraySegment(chunkRequest_pos, chunkRequest_length - chunkRequest_pos);var chunkRequest_managed_array = chunkRequest_seg.Array;var chunkRequest_managed_handle = System.Runtime.InteropServices.GCHandle.Alloc(chunkRequest_managed_array, System.Runtime.InteropServices.GCHandleType.Pinned);var chunkRequest_buffer_ptr = chunkRequest_managed_handle.AddrOfPinnedObject();System.IntPtr chunkRequest_fb_ptr;unsafe {    var chunkRequest_buffer_unsafe_ptr = (byte*) chunkRequest_buffer_ptr.ToPointer();    chunkRequest_fb_ptr = (System.IntPtr) (chunkRequest_buffer_unsafe_ptr + chunkRequest_pos);}var chunkRequest_intermediate = new FBIntermediateBuffer();chunkRequest_intermediate.ptr = chunkRequest_fb_ptr;
    try {
      global::System.IntPtr cPtr = GrapeshotRatePINVOKE.Rate_tryClaimTicket(swigCPtr, chunkRequest_intermediate);
      RateTicket ret = (cPtr == global::System.IntPtr.Zero) ? null : new RateTicket(cPtr, true);
      if (GrapeshotRatePINVOKE.SWIGPendingException.Pending) throw GrapeshotRatePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } finally {
chunkRequest_managed_handle.Free();
    }
  }

  public virtual bool areFreeTickets() {
    bool ret = GrapeshotRatePINVOKE.Rate_areFreeTickets(swigCPtr);
    if (GrapeshotRatePINVOKE.SWIGPendingException.Pending) throw GrapeshotRatePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
