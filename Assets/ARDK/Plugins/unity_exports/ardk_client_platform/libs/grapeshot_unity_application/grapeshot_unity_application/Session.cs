//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Grapeshot {

public class Session : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Session(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Session obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Session() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          GrapeshotSessionPINVOKE.delete_Session(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public System.Collections.IEnumerator waitTillFinishedRoutine(uint maxChunkCount = 1) {
        while(!isFinished()) {
            process(maxChunkCount);
            yield return null;
        }
    }

  public void process(uint maxChunks) {
    GrapeshotSessionPINVOKE.Session_process__SWIG_0(swigCPtr, maxChunks);
    if (GrapeshotSessionPINVOKE.SWIGPendingException.Pending) throw GrapeshotSessionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void process() {
    GrapeshotSessionPINVOKE.Session_process__SWIG_1(swigCPtr);
    if (GrapeshotSessionPINVOKE.SWIGPendingException.Pending) throw GrapeshotSessionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isFinished() {
    bool ret = GrapeshotSessionPINVOKE.Session_isFinished(swigCPtr);
    if (GrapeshotSessionPINVOKE.SWIGPendingException.Pending) throw GrapeshotSessionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void waitTillFinished() {
    GrapeshotSessionPINVOKE.Session_waitTillFinished(swigCPtr);
    if (GrapeshotSessionPINVOKE.SWIGPendingException.Pending) throw GrapeshotSessionPINVOKE.SWIGPendingException.Retrieve();
  }

  static private global::System.IntPtr SwigConstructSession(System.Guid clientIdentifier, ror.schema.upload.UploadSessionInfo sessionInfo, Driver driver, Rate rate, ApplicationChunkFetcher_FunctionApplicationBridgeBase applicationChunkFetcher, FinishedCallback_FunctionApplicationBridgeBase finishedCallback, ResponseCallback_FunctionApplicationBridgeBase responseCallback) {
var clientIdentifier_Bytes = clientIdentifier.ToByteArray();var clientIdentifier_ByteArrayHandle = System.Runtime.InteropServices.GCHandle.Alloc(clientIdentifier_Bytes ,System.Runtime.InteropServices.GCHandleType.Pinned);var clientIdentifier_buffer_ptr = clientIdentifier_ByteArrayHandle.AddrOfPinnedObject();
var sessionInfo_table = FlatBuffers.TableUtils.GetTable(sessionInfo);var sessionInfo_length = sessionInfo_table.bb.Length;var sessionInfo_pos = sessionInfo_table.bb_pos;var sessionInfo_seg = sessionInfo_table.bb.ToArraySegment(sessionInfo_pos, sessionInfo_length - sessionInfo_pos);var sessionInfo_managed_array = sessionInfo_seg.Array;var sessionInfo_managed_handle = System.Runtime.InteropServices.GCHandle.Alloc(sessionInfo_managed_array, System.Runtime.InteropServices.GCHandleType.Pinned);var sessionInfo_buffer_ptr = sessionInfo_managed_handle.AddrOfPinnedObject();System.IntPtr sessionInfo_fb_ptr;unsafe {    var sessionInfo_buffer_unsafe_ptr = (byte*) sessionInfo_buffer_ptr.ToPointer();    sessionInfo_fb_ptr = (System.IntPtr) (sessionInfo_buffer_unsafe_ptr + sessionInfo_pos);}var sessionInfo_intermediate = new FBIntermediateBuffer();sessionInfo_intermediate.ptr = sessionInfo_fb_ptr;
applicationChunkFetcher.allocApplicationCallback();
finishedCallback.allocApplicationCallback();
responseCallback.allocApplicationCallback();
    try {
      return GrapeshotSessionPINVOKE.new_Session(clientIdentifier_buffer_ptr, sessionInfo_intermediate, Driver.getCPtr(driver), Rate.getCPtr(rate), ApplicationChunkFetcher_FunctionApplicationBridgeBase.getCPtr(applicationChunkFetcher), FinishedCallback_FunctionApplicationBridgeBase.getCPtr(finishedCallback), ResponseCallback_FunctionApplicationBridgeBase.getCPtr(responseCallback));
    } finally {
clientIdentifier_ByteArrayHandle.Free();
sessionInfo_managed_handle.Free();
    }
  }

  public Session(System.Guid clientIdentifier, ror.schema.upload.UploadSessionInfo sessionInfo, Driver driver, Rate rate, ApplicationChunkFetcher_FunctionApplicationBridgeBase applicationChunkFetcher, FinishedCallback_FunctionApplicationBridgeBase finishedCallback, ResponseCallback_FunctionApplicationBridgeBase responseCallback) : this(Session.SwigConstructSession(clientIdentifier, sessionInfo, driver, rate, applicationChunkFetcher, finishedCallback, responseCallback), true) {
    if (GrapeshotSessionPINVOKE.SWIGPendingException.Pending) throw GrapeshotSessionPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
