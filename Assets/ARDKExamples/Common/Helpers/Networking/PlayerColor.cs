// Copyright 2021 Niantic, Inc. All Rights Reserved.

using System;

using Niantic.ARDK.Networking;
using Niantic.ARDK.Networking.MultipeerNetworkingEventArgs;

using UnityEngine;
using UnityEngine.UI;

using Random = System.Random;

namespace Niantic.ARDKExamples.Helpers
{
  /// <summary>
  /// A simple helper class that uses a peer ID to generate a color,
  /// for debugging and prototyping purposes
  /// </summary>
  public class PlayerColor:
    MonoBehaviour
  {
    /// Optional field to help visualize the color generated
    [SerializeField]
    private Image ColorIndicator = null;

    /// <summary>
    /// The color generated by this helper
    /// </summary>
    public Color Color
    {
      get
      {
        return _color;
      }
      private set
      {
        _color = value;

        if (ColorIndicator)
          ColorIndicator.color = value;
      }
    }

    private static readonly Color ColorDefault = Color.white;
    private Color _color = ColorDefault;

    private IMultipeerNetworking _networking = null;

    /// <summary>
    /// Generates a color based on the passed in GUID, using the GUID's hash code as a
    /// seed for a single-use RNG to generate RGB values.
    /// This is deterministic for a given GUID, but not necessarily unique.
    /// </summary>
    /// <param name="id">The GUID to base the color off of.</param>
    /// <returns>The generated color.</returns>
    public static Color ColorFromGuid(Guid id)
    {
      var colorGen = new Random(id.GetHashCode());

      return new Color
      (
        (float)colorGen.NextDouble(),
        (float)colorGen.NextDouble(),
        (float)colorGen.NextDouble()
      );
    }

    private void Awake()
    {
      Color = ColorDefault;
    }

    private void Start()
    {
      if (_networking == null)
        MultipeerNetworkingFactory.NetworkingInitialized += OnNetworkInitialized;
    }

    private void OnDestroy()
    {
      MultipeerNetworkingFactory.NetworkingInitialized -= OnNetworkInitialized;
      StopListeningToNetworking();
    }

    private void OnNetworkInitialized(AnyMultipeerNetworkingInitializedArgs args)
    {
      // This currently only supports automatically catching the first networking object it sees.
      if (_networking != null)
        return;

      ListenToNetworking(args.Networking);
    }

    private void OnConnected(ConnectedArgs args)
    {
      // Use RNG To generate a Color based on our ID's hashcode.
      Color = ColorFromGuid(args.Self.Identifier);
    }

    private void OnDisconnected(DisconnectedArgs args)
    {
      Color = ColorDefault;
    }

    private void OnDeinitialized(DeinitializedArgs args)
    {
      StopListeningToNetworking();
    }

    public void ListenToNetworking(IMultipeerNetworking networking)
    {
      StopListeningToNetworking();

      _networking = networking;
      _networking.Connected += OnConnected;
      _networking.Disconnected += OnDisconnected;
      _networking.Deinitialized += OnDeinitialized;
    }

    private void StopListeningToNetworking()
    {
      Color = ColorDefault;

      if (_networking == null)
        return;

      _networking.Connected -= OnConnected;
      _networking.Disconnected -= OnDisconnected;
      _networking.Deinitialized -= OnDeinitialized;

      _networking = null;
    }
  }
}
